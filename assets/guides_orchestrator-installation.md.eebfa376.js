import{_ as e}from"./chunks/fake-dev-instance-monitor-running.e3224c6d.js";import{_ as a,c as o,a as t,b as n,t as i,e as r,o as l}from"./app.ab6aacfa.js";const A=JSON.parse('{"title":"Install Metrist Orchestrator","description":"","frontmatter":{"title":"Install Metrist Orchestrator"},"headers":[{"level":2,"title":"Guided Installation","slug":"guided-installation","link":"#guided-installation","children":[]},{"level":2,"title":"Verification of Binaries","slug":"verification-of-binaries","link":"#verification-of-binaries","children":[]}],"relativePath":"guides/orchestrator-installation.md","lastUpdated":1669410141000}'),p={name:"guides/orchestrator-installation.md"},c={id:"frontmatter-title",tabindex:"-1"},d=t("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),h=r(`<h2 id="guided-installation" tabindex="-1">Guided Installation <a class="header-anchor" href="#guided-installation" aria-hidden="true">#</a></h2><ol><li><p>To start a guided installation of Orchestrator, run this command and follow the prompts. You will, for example, need your API token which you can get from <a href="https://app.metrist.io/profile" target="_blank" rel="noreferrer">app.metrist.io/profile</a>.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">curl https://dist.metrist.io/install.sh </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">/tmp/install.sh</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> bash /tmp/install.sh</span></span>
<span class="line"></span></code></pre></div><p>If you are running on a platform that the script supports, you will have a running copy of Orchestrator.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>journalctl --unit metrist-orchestrator</code> should show a running process.</p><p><code>sudo systemctl stop metrist-orchestrator</code> will stop the process.</p><p><code>sudo systemctl start metrist-orchestrator</code> will start the process.</p></div></li><li><p>Also, if logged in at <a href="https://app.metrist.io/" target="_blank" rel="noreferrer">app.metrist.io</a>, you can:</p><ul><li>Add the Metrist monitor to your dashboard (click <em>+ Add/Remove dependencies</em>),</li><li>select the Metrist monitor for display on your dashboard,</li><li><em>Save Changes</em>,</li><li>then navigate to the <em>Metrist</em> monitor &gt; <em>Realtime Data</em> &gt; <em>My Agent Data</em>.</li></ul><p>You should see your Orchestrator reporting telemetry data to a region called <code>fake-dev-instance</code> (this is configurable, see below).</p><p><img src="`+e+`" alt="Metrist monitor telemetry example"></p></li></ol><div class="info custom-block"><p class="custom-block-title">INFO</p><p>We do not support every combination/distribution of operating system. If the script detects that your system is not supported for guided installation, it will refer you back here.</p><p>Please see <a href="/guides/orchestrator-installation-alternatives.html">other installation options</a>. These options are a good starting point for unattended installations, docker environments, etc.</p></div><h2 id="verification-of-binaries" tabindex="-1">Verification of Binaries <a class="header-anchor" href="#verification-of-binaries" aria-hidden="true">#</a></h2><p>All binaries are signed by a key that is listed in our <a href="https://raw.githubusercontent.com/Metrist-Software/orchestrator/main/dist/trustedkeys.gpg" target="_blank" rel="noreferrer">public keyring</a>. Our installation instructions always include verify commands, such as:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">gpg --verify --keyring=/tmp/metrist.gpg $orch_latest.asc</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># where %orch_lastest.asc is the path to one of our binaries</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Example:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">wget -nc https://raw.githubusercontent.com/Metrist-Software/orchestrator/main/dist/trustedkeys.gpg -O /tmp/metrist.gpg</span></span>
<span class="line"><span style="color:#A6ACCD;">orch_latest=</span><span style="color:#89DDFF;">$(</span><span style="color:#C3E88D;">curl https://dist.metrist.io/orchestrator/ubuntu/20.04.x86_64.latest.txt</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">wget https://dist.metrist.io/orchestrator/ubuntu/</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">orch_latest</span></span>
<span class="line"><span style="color:#A6ACCD;">wget https://dist.metrist.io/orchestrator/ubuntu/</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">orch_latest.asc</span></span>
<span class="line"><span style="color:#A6ACCD;">gpg --verify --keyring=/tmp/metrist.gpg </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">orch_latest.asc</span></span>
<span class="line"></span></code></pre></div><details class="details custom-block"><summary>On warning: \u201Cgpg: Can&#39;t check signature: No public key\u201D</summary><p>Note the message: <code>gpg: Signature made Day ## Month yyyy hh:mm:ss</code>. This indicates the binary\u2019s signature is valid.</p><p>You will also see: <code>gpg: Can&#39;t check signature: No public key</code>. This is to be expected and indicates that you have not, with your own private key, declared trust in our keyring. Contact us for more information.</p><p><a href="/guides/how-we-sign-code.html">Read about how we sign code</a> for more information.</p></details>`,9);function u(s,m,g,y,f,b){return l(),o("div",null,[t("h1",c,[n(i(s.$frontmatter.title)+" ",1),d]),h])}const D=a(p,[["render",u]]);export{A as __pageData,D as default};
