import{_ as a,c as s,a as e,b as n,t as o,e as i,o as l}from"./app.d0dbe5e1.js";const _=JSON.parse('{"title":"Metrist PHP/Curl In-Process Agent","description":"","frontmatter":{"title":"Metrist PHP/Curl In-Process Agent"},"headers":[{"level":2,"title":"Building","slug":"building","link":"#building","children":[]},{"level":2,"title":"Configuration","slug":"configuration","link":"#configuration","children":[]}],"relativePath":"tools/agent-php-in-process.md","lastUpdated":1669071708000}'),r={name:"tools/agent-php-in-process.md"},c={id:"frontmatter-title",tabindex:"-1"},d=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),p=i(`<p>This directory contains the source code for the PHP/Curl In-Process Agent (IPA).</p><p>The goal of this agent is to hook into outgoing API calls and send them off to the local Metrist Orchestrator, which will sift through the data and send interesting items off for analysis to the Metrist backend.</p><p>Installation is quite simple: build or obtain the binary package, and then make sure that your PHP (or other software that uses libcurl in &quot;easy&quot; mode) process is loaded with the environment variable <code>LD_AUDIT</code> pointing at this library&#39;s location. The Linux loader will load it before other libraries (like libcurl) and in this way it is called first when Curl calls are made.</p><p>The library is thread-safe and should have negligible performance impact on your application: no in-process processing is done, and data is forwarded to the host&#39;s monitoring agent through UDP datagrams. This means that it&#39;ll never block.</p><h2 id="building" tabindex="-1">Building <a class="header-anchor" href="#building" aria-hidden="true">#</a></h2><p>You need the standard Unix toolchain (<code>make</code>, <code>gcc</code>) and the development version of libcurl installed. On an Ubuntu machine, this is usually accomplished by invoking:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">sudo apt install build-essential libcurl4-openssl-dev</span></span>
<span class="line"></span></code></pre></div><p>Invoking <code>make</code> will then build the library and run a test suite over the included linked list library. The agent is now in your directory as a <code>.so</code> file.</p><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-hidden="true">#</a></h2><p>Example: PHP 7.4 running with FPM behind Nginx under Systemd. Do:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">sudo systemctl edit php7.4-fpm.service</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>and make sure that the configuration override contains:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Service</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">Environment=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">LD_AUDIT=/opt/canary/libcanary_curl_ipa.so.0.1</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>Then restart the service and auditing should commence. There are two more environment variables you can use to change where the telemetry data is sent:</p><ul><li><code>CANARY_MONITORING_AGENT_HOST</code> sets a IP4/6 address to which telemetry data is to be sent. The default is localhost. Note that due to limitations of what an audit library can do, the use of hostnames is currently not possible here.</li><li><code>CANARY_MONITORING_AGENT_PORT</code> sets a port through which telemetry data is to be sent. The default is port 51712.</li></ul>`,15);function h(t,u,g,m,b,y){return l(),s("div",null,[e("h1",c,[n(o(t.$frontmatter.title)+" ",1),d]),p])}const v=a(r,[["render",h]]);export{_ as __pageData,v as default};
