import{_ as e,c as t,o,e as s}from"./app.37ce945b.js";const g=JSON.parse('{"title":"How We Sign Code","description":"","frontmatter":{},"headers":[],"relativePath":"guides/how-we-sign-code.md","lastUpdated":1669247360000}'),a={name:"guides/how-we-sign-code.md"},n=s(`<h1 id="how-we-sign-code" tabindex="-1">How We Sign Code <a class="header-anchor" href="#how-we-sign-code" aria-hidden="true">#</a></h1><p>For most, if not all, of our downloads you can download a PGP/GnuPG (GPG) signature by appending <code>.asc</code> to the download URL.</p><p>This signature can help you to verify that the code you are about to install is indeed the code we published. It is important, however, to realize exactly what is verified so you can work from the correct assumptions. Note that we assume that you know how public key encryption works; for further information on that topic see for example <a href="https://en.wikipedia.org/wiki/Public-key_cryptography" target="_blank" rel="noreferrer">Wikipedia</a>.</p><p>Three components are involved in verifying the integrity of our distribution binaries:</p><ul><li>The binary itself;</li><li>The signature;</li><li>The list of PGP keys that are allowed to sign.</li></ul><p>Once you download all three and verify the binary (see <a href="/guides/orchestrator-installation.html">our installation documentation</a> for details), you should expect output like the following:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># (Note the details may vary.)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">gpg: assuming signed data </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">metrist-orchestrator-0.1.0_amazon_linux_2_60e8415-1.x86_64.rpm</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">gpg: Signature made Wed 23 Nov 2022 08:23:38 AM CST</span></span>
<span class="line"><span style="color:#A6ACCD;">gpg:                using RSA key 1694322BAC8EA0B319D327B21FEB2FDD18CA2320</span></span>
<span class="line"><span style="color:#A6ACCD;">gpg: Good signature from </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Metrist Github Actions Signing Key &lt;support@metrist.io&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">unknown</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">gpg: WARNING: This key is not certified with a trusted signature</span><span style="color:#89DDFF;">!</span></span>
<span class="line"><span style="color:#A6ACCD;">gpg:          There is no indication that the signature belongs to the owner.</span></span>
<span class="line"><span style="color:#A6ACCD;">Primary key fingerprint: 1694 322B AC8E A0B3 19D3  27B2 1FEB 2FDD 18CA 2320</span></span>
<span class="line"></span></code></pre></div><p>There are two important outputs here:</p><ul><li>\u201CGood signature\u201D means that the three items \u2014 the list of keys, the signature, and the binary \u2014 match. In other words, one of the keys in the keyring you downloaded created the signature as a signature for the binary.</li><li>\u201CWARNING: This key is not certified with a trusted signature!\u201D means that GnuPG does not know for sure that this key is to be trusted.</li></ul><p>For GPG, \u201Ctrust\u201D is a big issue. On the public internet, you delegate trust: you trust your browser vendor, your browser trusts certificate authorities, and they trust people who ask for a certificate. Through that chain of trust \u2014 an electronically encoded series of signed declarations (\u201CI declare that\u2026\u201D) \u2014 your browser knows that the machine it is talking to is indeed <code>https://yourbank.com/</code> and not some hacker that subverted things. GPG does not have that centralized trust model and instead lets the user make their own decisions.</p><p>By merely downloading a keyring, you do not tell GPG anything about how much you trust any of the keys on that keyring. It is also technically not needed; this warning is just a reminder that you need to decide whether to trust these keys. A couple of questions come to mind:</p><dl><dt><em>Is this a recent keyring?</em></dt><dd><p>We (Metrist) may have revoked keys or added new ones in preparation of a regular refresh of our signing keys. We recommend you fetch the keyring each time when you want to verify a download.</p></dd><dt><em>Did it come from a trustworthy source?</em></dt><dd><p>We store the keyring on Github and signing (typically) happens on Github as well.</p></dd><dd><p>Also, all changes to the keyring are made with signed commits with signing keys in the keyring. The <a href="https://github.com/Metrist-Software/orchestrator/commits/main/dist/trustedkeys.gpg" target="_blank" rel="noreferrer">whole history</a> is traceable and, if you trust the first commit, you can be sure that the last commit is also trusted.</p></dd><dd><p>As you download the binary from one source \u2014 <code>dist.metrist.io</code> (on AWS S3) \u2014 and the signature from another source, someone would need to subvert two systems to tamper with the data. That should be sufficiently difficult that you can trust everything is alright. <strong>If you need more certainty, two options are avaialable to you:</strong>:</p><ul><li><a href="mailto:support@metrist.io" target="_blank" rel="noreferrer">Contact us</a> and ask for manual verification of the keyring,</li><li>or, where it concerns an Open Source product like Metrist Orchestrator, you can get the source code and do your own build on a system you trust.</li></ul></dd></dl>`,12),r=[n];function i(l,d,h,p,c,u){return o(),t("div",null,r)}const m=e(a,[["render",i]]);export{g as __pageData,m as default};
